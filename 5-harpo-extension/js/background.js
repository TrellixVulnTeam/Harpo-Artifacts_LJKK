/**************** Define constants and functions ****************/
const visitTimeout = 20000;
const delta = 0.75;
const rl_agent_url = 'ws://0.0.0.0:8765';
const alpha = 0.5;
const timePeriod = 1.0; // minute time period is one minute
const reconnectTimeout = 5000; // in ms
var firstObfUrlRequested = false;

/*
  Track user tabs
*/
const userTabs = {};

/*
  Instantiate new scheduler
*/
var scheduler = new ObfuscationUrlScheduler(delta, alpha, timePeriod);

/*
  Connect to rl_agent
*/
var rl_agent = new RLAgent(rl_agent_url, reconnectTimeout);

rl_agent.connect();

/*
  Function to collect new interest segments
*/

async function colIntSeg() {
  const url = "https://registry.bluekai.com/get_categories";

  resp = await fetch(url);
  json = await resp.json();

  return json;
}

// function attemptReconnection() {
//   var is_connected = rl_agent.connect();

//   console.log("The websocket is connected: ", is_connected);

//   if (!is_connected) {
//     console.log("Websocket failed to connect. Reconnecting...");
//     setTimeout(attemptReconnection, reconnectTimeout);
//   }
// }

// attemptReconnection(); // also takes care of first connection attempt


// if (!connection_success) {
//   browser.tabs.sendMessage({"type": "connection_failure"});
// }

/*
  function to request new obfuscation url and schedule next obfuscation URL arrival
*/
// function setNextArrivalTime() {
//   rl_agent.requestURL();
//   setTimeout(setNextArrivalTime, scheduler.nextArrival());
// }

/* Toolbar button click event */
let optionsPageData = {
  type: "detached_panel",
  url: "../options_page/options.html",
};

browser.browserAction.onClicked.addListener(function() {
  let optionsPage = browser.windows.create(optionsPageData);
});

function tabArrival() {
  var nextArrivalTime = scheduler.nextArrival();

  if (nextArrivalTime) {
    rl_agent.requestURL();
    setTimeout(tabArrival, nextArrivalTime * 60 * 1000);
  } else {
    setTimeout(tabArrival, 60 * 1000); // if the next arrival time is not scheduled, wait one minute and check again
  }
}

/* 
  Calculate avg. time between tabs being opened by the user
*/
function pageCreated(id) {
  if (!hiddenTabs.includes(id)) { // check to see that event was not generated by hidden tab
    scheduler.updateArrivals();
    if (!firstObfUrlRequested) {
      var nextArrivalTime = scheduler.nextArrival();
      if (nextArrivalTime) {
        setTimeout(tabArrival, nextArrivalTime * 60 * 1000);
        firstObfUrlRequested = true;
      }
    }
  }
}

// Receive message from content scripts.
function receiveMessageFromOtherScripts(message, sender) {
  if (message.type == "send_page_info") { // leave room for future expansion (additional message types)
    
    // Make sure the sender is not a hidden tab
    hiddenTabIndex = hiddenTabs.findIndex(tabId => tabId == sender.tab.id);

    if (hiddenTabIndex == -1) {
      console.log("Received html file from site: " + message.url + ".");
      var num_obfuscation_url = 0;
      while (Math.random() < 0.5) {
          num_obfuscation_url += 1
      }
      rl_agent.sendPageInfo(message.url, message.html)
    }
  } else if (message.type == "category_update") {
    rl_agent.sendCategoryUpdate(message);
  } else if (message.type == "category_request") {
    // request categories
    rl_agent.requestURLCategories(sender.tab.id);
  } else if (message.type == "page_creation") {
    pageCreated(sender.tab.id);
  } else if (message.type == "reconnect_request") {
    // retry websocket connection
    rl_agent.connect();
  }
}

/*
Listen the message (url and html) from content scripts, and send it to rl_agent.
*/
browser.runtime.onMessage.addListener(receiveMessageFromOtherScripts);

/*
Listen for the response message from the rl_agent (an obfuscation url), and visit it.
*/
rl_agent.addMessageListener('url_request', function(data) {
  openHiddenTabs(data);

  colIntSeg().then((json) => {
    rl_agent.sendIntSegUpdate(json, data['uuid']);
  });
})

rl_agent.addMessageListener('send_page_info', function(data) {
  console.log(data);
})

rl_agent.addMessageListener('category_reply', function(data) {
  var tabId = data.id;
  browser.tabs.sendMessage(tabId, data);
})

rl_agent.addMessageListener('category_update', function(data) {
  console.log(data);
})

// Get rate collection started
function rateCollector() {
  scheduler.timePeriodFunction();
  setTimeout(rateCollector, timePeriod * 60 * 1000);
}

setTimeout(rateCollector, timePeriod * 60 * 1000);